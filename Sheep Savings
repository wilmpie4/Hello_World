# imported classes for widget
import sys
import datetime
from PyQt5 import QtWidgets as qw
from PyQt5 import QtGui as qg
from PyQt5 import QtCore as qc

# imported classes for data
import pyodbc as odbc
import pandas as pd
import numpy as np

# imported classes for plotting
import matplotlib.pyplot as plt

#regression
# creating training and test data
from sklearn.model_selection import train_test_split as tts
# fitting simple regression to training set
from sklearn.linear_model import LinearRegression 
# quality of error and machine
from sklearn import metrics  


# ------------------------------------------------- LOGIN APPLICATION ------------------------------------------------- #
class LOGIN(qw.QWidget):
    
    # Add cls Variables here
    # ----------------------------------
    cnxn = odbc.connect("Driver={SQL Server Native Client 11.0};"
                        "Server=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;"
                        "Database=Sheep_Saving;"
                        "Trusted_Connection=yes;")

    # Login Screen + start app
    # ----------------------------------
    def __init__(self):
        super().__init__()

        l = qw.QGridLayout(self)

        self.title = 'Login Sheep Savings'
        self.top = 300
        self.left = 300
        self.width = 300
        self.height = 200
        
        self.setWindowTitle(self.title)
        self.setGeometry(self.top,self.left,self.width,self.height)
        self.init_log(l)

    # Added items to login Screen
    # ----------------------------------
    def init_log(self, l):

        self.btn_ok = qw.QPushButton('Ok', self)
        l.addWidget(self.btn_ok ,2,0)
        self.btn_ok.clicked.connect(self.btn_ok_func)

        self.label_user = qw.QLabel(self)
        self.label_user.setText('User Name:')
        l.addWidget(self.label_user ,0,0)

        self.user_input = qw.QLineEdit(self)
        l.addWidget(self.user_input,0,1)

        self.label_pw = qw.QLabel(self)
        self.label_pw.setText('Password:')
        l.addWidget(self.label_pw ,1,0)

        self.pw_input = qw.QLineEdit(self)
        l.addWidget(self.pw_input ,1,1)
        
        self.show()

    # Open main screen
    # ----------------------------------
    def btn_ok_func(self):
        user = str(self.user_input.text())+ '_' + str(self.pw_input.text())
        input_user = str(self.user_input.text())
        
        sql_user = ("select case when '" + user + "' in (select Password_ from User_Password) then 'Yes' else 'No' end as Check_ from User_Password")
        df_user = pd.read_sql(sql_user, LOGIN.cnxn)
        if (df_user['Check_'][0]) == 'Yes':
            self.dialog = GUI(input_user)
            self.dialog.show()
            self.close()
        else:
            'Nothing'

            
# ------------------------------------------------- MAIN APPLICATION ------------------------------------------------- #
class GUI(qw.QMainWindow):

    # Add cls Variables here
    # ----------------------------------
    cnxn = odbc.connect("Driver={SQL Server Native Client 11.0};"
                        "Server=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;"
                        "Database=Sheep_Saving;"
                        "Trusted_Connection=yes;")

    sql_tb = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_CATALOG = 'Sheep_Saving'" 

    # Main application + start app
    # ----------------------------------
    def __init__(self, user):
        qw.QMainWindow.__init__(self)

        l = qw.QGridLayout(self)

        self.title = 'Sheep Savings'
        self.top = 100
        self.left = 100
        self.width = 500
        self.height = 500

        self.user = user
        
        self.setWindowTitle(self.title)
        self.setGeometry(self.top,self.left,self.width,self.height)
        self.initUI()

    # Added items to main window
    # ----------------------------------
    def initUI(self):

        # main menu
        menubar = self.menuBar()
        file_menu = menubar.addMenu('File')
        plot_menu = menubar.addMenu('Plot')
        table_menu = menubar.addMenu('Table')
        statistics_menu = menubar.addMenu('Statistics')
        connections_menu = menubar.addMenu('Connections')
       
        # file menu
        open_file = file_menu.addMenu('Open File')

        open_csv = qw.QAction('Open CSV', self)
        open_file.addAction(open_csv)
        open_csv.triggered.connect(self.open_csv)

        open_xml = qw.QAction('Open XML', self)
        open_file.addAction(open_xml)
        open_xml.triggered.connect(self.open_xml)

        upload_file = qw.QAction('Upload File', self)
        file_menu.addAction(upload_file)
        upload_file.triggered.connect(self.upload_file)

        exit_gui = qw.QAction('Exit', self)        
        file_menu.addAction(exit_gui)
        exit_gui.triggered.connect(self.close)

        # plot_menu
        line_plot = qw.QAction('Line Plot', self)
        plot_menu.addAction(line_plot)
        line_plot.triggered.connect(self.line_plot)

        bar_plot = qw.QAction('Bar Plot', self)
        plot_menu.addAction(bar_plot)
        bar_plot.triggered.connect(self.bar_plot)
        
        scatter_plot = qw.QAction('Scatter Plot', self)
        plot_menu.addAction(scatter_plot)
        scatter_plot.triggered.connect(self.scatter_plot)

        # table_menu
        column_menu = table_menu.addMenu('Column')

        column_name = qw.QAction('Change Column Name', self)
        column_menu.addAction(column_name)
        column_name.triggered.connect(self.column_name)

        add_column = qw.QAction('Add Column', self)
        column_menu.addAction(add_column)
        add_column.triggered.connect(self.add_column)

        cal_column = qw.QAction('Calculated Column', self)
        column_menu.addAction(cal_column)
        cal_column.triggered.connect(self.calculated_column)

        row_menu = table_menu.addMenu('Rows')
        add_row = qw.QAction('Add Rows', self)
        row_menu.addAction(add_row)
        add_row.triggered.connect(self.add_row)

        group_by = qw.QAction('Group By', self)
        table_menu.addAction(group_by)
        
        # statistics menu
        des  = qw.QAction('Descriptives', self)
        statistics_menu.addAction(des)
        regression_menu    = statistics_menu.addMenu('Regression')        
        single_var    = qw.QAction('Linear Regession', self)
        regression_menu.addAction(single_var)
        single_var.triggered.connect(self.Open_LIN_REG)
        multi_var     = qw.QAction('Linear Multivariate Regression', self)
        regression_menu.addAction(multi_var)

        #connections menu
        sql_db = qw.QAction('Connect to sql Db', self)
        connections_menu.addAction(sql_db)
        api_connect = qw.QAction('Connect to API', self)
        connections_menu.addAction(api_connect)
        python_connect = qw.QAction('Connect to Python with dataframe', self)
        connections_menu.addAction(python_connect)

        # adding table to mainwindow
        self.table = qw.QTableWidget(self)
        self.table.setRowCount(5)
        self.table.setColumnCount(5)
        self.table.setGeometry(qc.QRect(20,55,700,650))
        self.table.cellClicked.connect(self.cell_was_clicked)

        # adding label with User
        self.user_label = qw.QLabel(self)
        self.user_label.setText('User: ' + self.user)
        self.user_label.move(20,22)

        # adding dropdown with project
        self.pr_label = qw.QLabel(self)
        self.pr_label.setText('Current Project')
        self.pr_label.move(100,22)
        self.qboxproj = qw.QComboBox(self)
        self.qboxproj.move(180,22)
        self.qboxproj.activated[str].connect(self.fill_qboxth)
        
        # adding dropdown with threads
        self.th_label = qw.QLabel(self)
        self.th_label.setText('Current Thread')
        self.th_label.move(300,22)
        self.qboxth = qw.QComboBox(self)
        self.qboxth.move(380,22)
        self.qboxth.activated[str].connect(self.fill_qboxin)

        # adding dropdown with instance 
        self.in_label = qw.QLabel(self)
        self.in_label.setText('Current Instance')
        self.in_label.move(500,22)
        self.qboxin = qw.QComboBox(self)
        self.qboxin.move(600,22)
        self.qboxin.activated[str].connect(self.download_instance)

        # adding inputbox with comments to mainwindow
        self.comt_label = qw.QLabel(self)
        self.comt_label.setText('Please state comments and changes')
        self.comt_label.setGeometry(750, 28, 200, 20)
        self.comt = qw.QTextEdit(self)
        self.comt.setGeometry(750,55,500,100)

        # adding pushbutton to mainwindow for upload instance
        self.upl_inst_btn = qw.QPushButton(self)
        self.upl_inst_btn.setText('Upload instance')
        self.upl_inst_btn.move(1000,22)
        self.upl_inst_btn.clicked.connect(self.upload_instance)

        #labels for descriptive data 
        self.data_type_label = qw.QLabel(self)
        self.std_label = qw.QLabel(self)
        self.max_label = qw.QLabel(self)
        self.min_label = qw.QLabel(self)
        self.sum_label = qw.QLabel(self)
        self.avg_label = qw.QLabel(self)
        self.cnt_label = qw.QLabel(self)

        # visualizing GUI
        self.fill_qboxproj()
        self.show()

    # Qboxtable with all projects in db
    # ----------------------------------
    def fill_qboxproj(self):
        self.qboxproj.clear()
        sql_proj = "select project_name\
                    from projects as pr\
                    inner join User_Password as us on us.User_index = pr.user_index\
                    where us.[User_name] = '" + str(self.user) + "'"
        df_pr = pd.read_sql(sql_proj, GUI.cnxn)
        df_pr = df_pr['project_name']

        for i in range(len(df_pr)):
            self.qboxproj.addItem(df_pr[i])            

    # Qboxtable with all threads in project
    # ----------------------------------
    def fill_qboxth(self, project):
        self.qboxth.clear()
        sql_th = "select thread_name\
                    from projects as pr\
                    inner join User_Password as us on us.User_index = pr.user_index\
                    inner join threads as th on th.project_index = pr.project_index\
                    where us.[User_name] = '" + str(self.user) + "'\
                    and pr.project_name = '" + str(project) + "'"
        df_th = pd.read_sql(sql_th, GUI.cnxn)
        df_th = df_th['thread_name']

        for i in range(len(df_th)):
            self.qboxth.addItem(df_th[i])

    # Qboxtable with all instances in thread
    # ----------------------------------
    def fill_qboxin(self, thread):
        self.qboxin.clear()
        project = self.qboxproj.currentText()
        sql_in = "select date_created\
                    from projects as pr\
                    inner join User_Password as us on us.User_index = pr.user_index\
                    inner join threads as th on th.project_index = pr.project_index\
                    inner join instance as ins on ins.thread_index = th.thread_index\
                    where us.[User_name] = '" + str(self.user) + "'\
                    and pr.project_name = '" + str(project) + "'\
                    and th.thread_name = '" + str(thread) + "'"
        df_in = pd.read_sql(sql_in, GUI.cnxn)
        df_in = df_in['date_created']

        for i in range(len(df_in)):
            self.qboxin.addItem(str(df_in[i]))
            
    # Create tablewidget from dataframe
    # ----------------------------------
    def create_table(self, df_main):
        column_header = list(df_main.columns)
        column = 0
        self.table.setColumnCount(df_main.shape[1]) 
        self.table.setRowCount(df_main.shape[0])
        
        for i in column_header:
            row = 0
            for j in df_main[i]:
                if str(j) != 'nan':
                    newitem = qw.QTableWidgetItem(str(j))
                    self.table.setItem(row, column, newitem)
                else:
                    empty = qw.QTableWidgetItem('')
                    self.table.setItem(row, column, empty)
                row = row + 1
            column = column + 1
        # adjust amount of columns in table
        self.table.setColumnCount(len(column_header))
        # add headers to table
        self.table.setHorizontalHeaderLabels(column_header)
                
    # Create dataframe from tablewidget
    # ----------------------------------
    def df_table(self):
        df_main = pd.DataFrame()

        for i in range(self.table.columnCount()):
            cl_name = str(self.table.horizontalHeaderItem(i).text())
            df_main[str(cl_name)] = 1

        for i in range(self.table.columnCount()):
            cl_name = str(self.table.horizontalHeaderItem(i).text())
            for j in range(self.table.rowCount()):
                item = self.table.item(j,i).text()                  
                if i == 0:
                    df_main = df_main.append({str(cl_name): item}, ignore_index=True)
                elif item == '':
                    'nothing'
                else:
                    df_add = pd.DataFrame({cl_name: [item]}, index=[j])
                    df_main.update(df_add)
                    
        df_main = df_main.apply(pd.to_numeric, errors='ignore')
        return df_main

    # Open CSV
    # ----------------------------------
    def open_csv(self):
        fp = qw.QFileDialog.getOpenFileName(self,
                                             'Single File',
                                             '~Desktop\Python\data',
                                             '*.csv')
        # adding data from csv to table
        if fp[0] != '':
            df_csv = pd.read_csv(str(fp[0]))
            self.create_table(df_csv)
            
    # Open XML
    # ----------------------------------
    def open_xml(self):
        pass
    '''
import xml.etree.ElementTree as ET
import pandas as pd

class XML2DataFrame:

    def __init__(self, xml_data):
        self.root = ET.XML(xml_data)

    def parse_root(self, root):
        return [self.parse_element(child) for child in iter(root)]

    def parse_element(self, element, parsed=None):
        if parsed is None:
            parsed = dict()
        for key in element.keys():
            parsed[key] = element.attrib.get(key)
        if element.text:
            parsed[element.tag] = element.text
        for child in list(element):
            self.parse_element(child, parsed)
        return parsed

    def process_data(self):
        structure_data = self.parse_root(self.root)
        return pd.DataFrame(structure_data)

xml2df = XML2DataFrame(xml_data)
xml_dataframe = xml2df.process_data()
'''

# -------------------------------------------------  Will be Outfased ------------------------------------------------- #    
    # Upload File 
    # ----------------------------------
    def upload_file(self):

        tb_name, okpressed = qw.QInputDialog.getText(self, 'Table Name', 'Please state table name:')
        if okpressed:
            cursor = GUI.cnxn.cursor()
            sql_tb = "Create table [" + tb_name + "] (index_column float)"
            cursor.execute(str(sql_tb))
            cursor.commit()

        for i in range(self.table.columnCount()):
            cl_name = str(self.table.horizontalHeaderItem(i).text())
            if cl_name != 'index_column':
                sql_cl = "Alter table [" + tb_name + "] Add [" + cl_name + "] varchar(255)"
                cursor.execute(str(sql_cl))
                cursor.commit()
            else:
                'Nothing'

        for i in range(self.table.rowCount()):
            sql_in = "insert into " + tb_name + "(index_column) values (" + str(i) + ")"
            cursor.execute(str(sql_in))
            cursor.commit()

        for i in range(self.table.columnCount()):
            cl_name = str(self.table.horizontalHeaderItem(i).text())
            for j in range(self.table.rowCount()):
                item = self.table.item(j,i).text()
                sql_it = "Update [" + tb_name + "] set [" + cl_name + "] = " + "'" +   item +  "' where index_column = " + str(j)
                cursor.execute(str(sql_it))
                cursor.commit()

    # Download File
    # ----------------------------------
    def download_file(self, tb_name):
        sql_re = 'Select * from ' + tb_name
        df_main = pd.read_sql(sql_re, GUI.cnxn)

        self.create_table(df_main)
# -------------------------------------------------  Will be Outfased ------------------------------------------------- #

    # Upload Instance
    # ----------------------------------
    def upload_instance(self):
        # Create new instance in instance table
        inst_name = str(datetime.datetime.now())
        inst_parent = str(self.qboxin.currentText())
        inst_thread = str(self.qboxth.currentText())
        inst_project = str(self.qboxproj.currentText())
        sql = "with thread as (select th.thread_index from projects as pr \
						 inner join threads as th on th.project_index = pr.project_index \
						 where pr.project_name = '" + inst_project + "' \
						 and   th.thread_name = '" + inst_thread + "') \
	             ,inst as (select ins.instance_index from projects as pr \
						 inner join threads as th on th.project_index = pr.project_index \
						 inner join instance as ins on ins.thread_index = th.thread_index \
						 where pr.project_name = '" + inst_project + "' \
						 and   th.thread_name = '" + inst_thread + "' \
						 and   ins.date_created = '" + inst_parent + "') \
                                                 \
             insert into instance (thread_index, date_created, instance_parent_index) \
             Values ((select th.thread_index from thread as th),'"+ inst_name + "', (select inst.instance_index from inst as inst))"
        cursor = GUI.cnxn.cursor()
        cursor.execute(str(sql))
        cursor.commit()
        self.fill_qboxin(inst_thread)

        # Create or update columns in instance_columns_table
        df_main = self.df_table()
        column_header = list(df_main.columns)
        column = 0
        for i in column_header:
            sql_column = "with inst as (select ins.instance_index from projects as pr \
						 inner join threads as th on th.project_index = pr.project_index \
						 inner join instance as ins on ins.thread_index = th.thread_index \
						 where pr.project_name = '" + inst_project + "' \
						 and   th.thread_name = '" + inst_thread + "' \
						 and   ins.date_created = '" + inst_parent + "') \
                  \
                  select distinct case when '" + i + "_" + str(column) + "_' + convert(varchar(30), inst.instance_index) in (\
                         select  concat(column_name,'_',  column_location,'_', instance_updated) \
                         from instance_columns as inst) then 'Yes' else 'No' end as Available from inst"
            df_column = pd.read_sql(sql_column, GUI.cnxn)
            if df_column['Available'][0] == 'Yes':
                sql_update = "with inst_updated as (select ins.instance_index from projects as pr \
						 inner join threads as th on th.project_index = pr.project_index \
						 inner join instance as ins on ins.thread_index = th.thread_index \
						 where pr.project_name = '" + inst_project + "' \
						 and   th.thread_name = '" + inst_thread + "' \
						 and   ins.date_created = '" + inst_parent + "') \
                             ,inst_created as (select ins.instance_index from projects as pr \
						 inner join threads as th on th.project_index = pr.project_index \
						 inner join instance as ins on ins.thread_index = th.thread_index \
						 where pr.project_name = '" + inst_project + "' \
						 and   th.thread_name = '" + inst_thread + "' \
						 and   ins.date_created = '" + inst_name + "')\
                             update instance_columns\
                                    set instance_updated = (select instance_index from inst_created) \
                                    where instance_updated = (select instance_index from inst_updated) \
                                    and column_name = '"+ i + "' \
                                   and convert(varchar(30), column_location) = '"+ str(column) + "'"
                cursor = GUI.cnxn.cursor()
                cursor.execute(str(sql_update))
                cursor.commit()
            else:
                sql_insert = "with inst_created as (select ins.instance_index from projects as pr \
						 inner join threads as th on th.project_index = pr.project_index \
						 inner join instance as ins on ins.thread_index = th.thread_index \
						 where pr.project_name = '" + inst_project + "' \
						 and   th.thread_name = '" + inst_thread + "' \
						 and   ins.date_created = '" + inst_name + "')\
                            \
                            insert into instance_columns (column_name, column_location, instance_created, instance_updated)\
                            values( '" + i + "', '" + str(column) + "' ,(select instance_index from inst_created),\
                                                                        (select instance_index from inst_created))"
                print(sql_insert)
                cursor = GUI.cnxn.cursor()
                cursor.execute(str(sql_insert))
                cursor.commit()
            column = column + 1
            
        # Create or update items in instance_items_table
        for i in column_header:
            df_update = df_main[str(i)]
            row = 0
            column = str(i)
            for j in df_update:
                value = str(j)
                row_number = str(row)
                sql_item = "with inst_updated as (select ins.instance_index as inst_up from projects as pr \
						 inner join threads as th on th.project_index = pr.project_index \
						 inner join instance as ins on ins.thread_index = th.thread_index \
						 where pr.project_name = '" + inst_project + "' \
						 and   th.thread_name = '" + inst_thread + "' \
						 and   ins.date_created = '" + inst_parent + "') \
                           ,column_index as (select col.instance_columns_index as col_in from instance as inst \
						inner join instance_columns as col on col.instance_updated = inst.instance_index \
						where inst.date_created = '" + inst_name + "' \
						and col.column_name = '" + column + "' ) \
                            \
                            select case when concat('"+ row_number  + value + "', col_in, inst_up) in( \
                            select concat(item_rownumber, item_value, instance_columns_index, instance_updated) \
                            from instance_items) then 'Yes' else 'No' end as Available \
							from column_index \
							    ,inst_updated "
                df_item = pd.read_sql(sql_item, GUI.cnxn)
                if df_item['Available'][0] == 'Yes':
                      sql_item_update = "with inst_col_index as (select col.instance_columns_index as col_in from instance as inst \
                                                inner join instance_columns as col on col.instance_updated = inst.instance_index \
						where inst.date_created = '" + inst_name + "' \
						and col.column_name = '" + column + "' ) \
                                              ,inst_created as (select ins.instance_index as inst_cr from projects as pr \
						 inner join threads as th on th.project_index = pr.project_index \
						 inner join instance as ins on ins.thread_index = th.thread_index \
						 where pr.project_name = '" + inst_project + "' \
						 and   th.thread_name = '" + inst_thread + "' \
						 and   ins.date_created = '" + inst_name + "')\
                                              ,inst_updated as (select ins.instance_index as inst_up from projects as pr \
						 inner join threads as th on th.project_index = pr.project_index \
						 inner join instance as ins on ins.thread_index = th.thread_index \
						 where pr.project_name = '" + inst_project + "' \
						 and   th.thread_name = '" + inst_thread + "' \
						 and   ins.date_created = '" + inst_parent + "') \
                                                \
                                                update instance_items \
                                                set instance_updated = (select * from inst_created)\
                                                where item_value ='"+  value + "' \
                                                and   item_rownumber = "+ row_number +"  \
                                                and   instance_columns_index = (select * from inst_col_index) \
                                                and   instance_updated = (select * from inst_updated)"
                      cursor = GUI.cnxn.cursor()
                      cursor.execute(str(sql_item_update))
                      cursor.commit()
                else:
                    sql_item_insert = "with inst_created as (select ins.instance_index as inst_cr from projects as pr \
						 inner join threads as th on th.project_index = pr.project_index \
						 inner join instance as ins on ins.thread_index = th.thread_index \
						 where pr.project_name = '" + inst_project + "' \
						 and   th.thread_name = '" + inst_thread + "' \
						 and   ins.date_created = '" + inst_name + "') \
                           ,column_index as (select col.instance_columns_index as col_in from instance as inst \
						inner join instance_columns as col on col.instance_updated = inst.instance_index \
						where inst.date_created = '" + inst_name + "' \
						and col.column_name = '" + column + "' ) \
                                                         \
                                      insert into instance_items (item_rownumber, item_value, instance_columns_index, instance_created, instance_updated) \
                                      values ("+ row_number +","+ "'" + value + "'" + ", \
                                             (select col_in from column_index),(select inst_cr from inst_created), \
                                             (select inst_cr from inst_created))"        
                    cursor = GUI.cnxn.cursor()
                    cursor.execute(str(sql_item_insert))
                    cursor.commit()
                row = row + 1
                
        # Upload comments still in previous def
        inst_comt = str(self.comt.toPlainText())
        sql_com = "with inst_index as (select inst.instance_index from instance as inst \
								  where inst.date_created = '" + inst_name + "') \
                    \
                    insert into instance_comments(instance_index, instance_comments_value) \
                    values((select inst.instance_index from inst_index as inst),'" + inst_comt + "' )"
        cursor = GUI.cnxn.cursor()
        cursor.execute(str(sql_com))
        cursor.commit()

    # Download Instance 
    # ----------------------------------
    def download_instance(self, instance_name):
        sql_col_ins = "with current_instance as (select instance_index from instance as inst\
								 where inst.date_created = '" + instance_name + "')\
                        \
                        select col.column_name, col.column_location, col.instance_columns_index  from instance_columns as col\
                               where col.instance_created <= (select instance_index from current_instance)\
                               and   col.instance_updated >= (select instance_index from current_instance)\
                               order by col.column_location"
        df_col = pd.read_sql(sql_col_ins, GUI.cnxn)
        list_col = list(df_col['column_name'])
        df_main = pd.DataFrame()

        for i in list_col:
            df_main[str(i)] = 1

        for index, row in df_col.iterrows():
            sql_val_ins = "with current_instance as (select instance_index from instance as inst \
								 where inst.date_created = '" + instance_name + "') \
                            \
                            select itm.item_value, itm.item_rownumber \
                            from instance_columns as col\
                            inner join instance_items  as itm on itm.instance_columns_index = col.instance_columns_index \
                            where col.instance_columns_index =" + str(row['instance_columns_index'])+" \
                            and itm.instance_created  <= (select instance_index from current_instance) \
                            and itm.instance_updated >= (select instance_index from current_instance) \
                            order by itm.item_rownumber"
            df_items = pd.read_sql(sql_val_ins, GUI.cnxn)
            for index2, row2 in df_items.iterrows():
                row_number = str(row2['item_rownumber'])
                item = str(row2['item_value'])
                column = str(row['column_name'])
                column_number = str(row['column_location'])
                if column_number == '0':
                    df_main = df_main.append({column: item}, ignore_index=True)
                else:
                    df_add = pd.DataFrame({column: [item]}, index=[int(row_number)])
                    df_main.update(df_add)
        self.create_table(df_main)

        # dowload comments still in previous def
        sql_com = "select inst_com.instance_comments_value \
		   from instance ins \
		   inner join instance_comments as inst_com on ins.instance_index = inst_com.instance_index \
		   where ins.date_created = '" + instance_name + "'"
        df_com = pd.read_sql(sql_com, GUI.cnxn)
        comment = str(df_com['instance_comments_value'][0])
        self.comt.setPlainText(comment)

    # lineplot
    # ----------------------------------
    def line_plot(self):
        df_main = self.df_table()
        plot = list(df_main.columns)
        x_, okpressed = qw.QInputDialog.getItem(self, 'X Variable', 'Please name X variable:', plot)
        y_, okpressed = qw.QInputDialog.getItem(self, 'Y Variable', 'Please name Y variable:', plot)
        x = (list(df_main[str(x_)]))
        y = (list(df_main[str(y_)]))
        plt.plot(x , y)
        plt.show()

    # scatterplot
    # ----------------------------------
    def scatter_plot(self):
        df_main = self.df_table()
        plot = list(df_main.columns)
        x_, okpressed = qw.QInputDialog.getItem(self, 'X Variable', 'Please name X variable:', plot)
        y_, okpressed = qw.QInputDialog.getItem(self, 'Y Variable', 'Please name Y variable:', plot)
        x = (list(df_main[str(x_)]))
        y = (list(df_main[str(y_)]))
        plt.scatter(x , y)
        plt.show()

    # barplot
    # ----------------------------------
    def bar_plot(self):
        df_main = self.df_table()
        plot = list(df_main.columns)
        x_, okpressed = qw.QInputDialog.getItem(self, 'X Variable', 'Please name X variable:', plot)
        y_, okpressed = qw.QInputDialog.getItem(self, 'Y Variable', 'Please name Y variable:', plot)
        x = (list(df_main[str(x_)]))
        y = (list(df_main[str(y_)]))
        plt.bar(x , y)
        plt.show()

    # add column
    # ----------------------------------
    def add_column(self):
        cl_list = []
        
        for i in range(self.table.columnCount()):
            cl_name = str(self.table.horizontalHeaderItem(i).text())
            cl_list.append(cl_name)

        new_name_, okpressed = qw.QInputDialog.getText(self, 'Column name', 'Please state column name:')
        cl_list.append(new_name_)
        clm_cnt = self.table.columnCount()
        self.table.setColumnCount(clm_cnt + 1)
        self.table.setHorizontalHeaderLabels(cl_list)

    # add rows
    # ----------------------------------
    def add_row(self):
        row_count_, okpressed = qw.QInputDialog.getText(self, 'Add Row', 'Please state amount of rows you would like to add:')
        
        for i in range(int(row_count_)):
            rowPosition = self.table.rowCount()
            self.table.insertRow(rowPosition)

    # change column name
    # ----------------------------------
    def column_name(self):
        cl_list = []
        for i in range(self.table.columnCount()):
            cl_name = str(self.table.horizontalHeaderItem(i).text())
            cl_list.append(cl_name)

        column_, okpressed = qw.QInputDialog.getItem(self, 'List of Columns', 'Please select Column to change:', cl_list)
        new_name_, okpressed = qw.QInputDialog.getText(self, 'Column name', 'Please state new name:')
        
        for (i, item) in enumerate(cl_list):
            if item == column_:
                cl_list[i] = new_name_

        self.table.setHorizontalHeaderLabels(cl_list)

    # calculated column
    # ----------------------------------
    def calculated_column(self):
        df = self.df_table()
        cal_column_, okpressed = qw.QInputDialog.getText(self, 'Calculated Column',
                                                         "Please state calculated column: df['columnname'] = df['col_name'] + df['col_name']:")
        #exec(cal_column_)
        print(cal_column_)

    # cell values such as column avg etc....
    # ----------------------------------
    def cell_was_clicked(self, row, column):
        df_desc = pd.DataFrame()
        cl_name = str(self.table.horizontalHeaderItem(column).text())
        df_desc[str(cl_name)] = 1


        for j in range(self.table.rowCount()):
            item = self.table.item(j,column).text()
            if item != '':
                df_desc = df_desc.append({str(cl_name): item}, ignore_index=True)

        df_desc = df_desc.apply(pd.to_numeric, errors='ignore')
        data_type = str(list(df_desc.dtypes)[0])

        self.data_type_label.setText('Data Type: ' + data_type)
        self.data_type_label.setGeometry(750, 200, 200, 20)
        self.data_type_label.show()

        if data_type in ('float64', 'int64'):
            avg_data = str(df_desc[df_desc.columns[0]].mean())
            self.avg_label.setText('Mean data: ' + avg_data)
            self.avg_label.setGeometry(750, 220, 200, 20)
            self.avg_label.show()

            cnt_data = str(df_desc[df_desc.columns[0]].count())
            self.cnt_label.setText('Count data: ' + cnt_data )
            self.cnt_label.setGeometry(750, 240, 200, 20)
            self.cnt_label.show()

            sum_data = str(df_desc[df_desc.columns[0]].sum())
            self.sum_label.setText('Sum data: ' + sum_data )
            self.sum_label.setGeometry(750, 260, 200, 20)
            self.sum_label.show()

            max_data = str(df_desc[df_desc.columns[0]].max())
            self.max_label.setText('Max data: ' + max_data )
            self.max_label.setGeometry(750, 280, 200, 20)
            self.max_label.show()

            min_data = str(df_desc[df_desc.columns[0]].min())
            self.min_label.setText('Min data: ' + min_data )
            self.min_label.setGeometry(750, 300, 200, 20)
            self.min_label.show()

            std_data = str(df_desc[df_desc.columns[0]].std())
            self.std_label.setText('Std data: ' + std_data )
            self.std_label.setGeometry(750, 320, 200, 20)
            self.std_label.show()

        else:
            self.std_label.setText('')
            self.std_label.show()

            self.min_label.setText('')
            self.min_label.show()

            self.max_label.setText('')
            self.max_label.show()

            self.sum_label.setText('')
            self.sum_label.show()

            self.avg_label.setText('')
            self.avg_label.show()

            self.cnt_label.setText('')
            self.cnt_label.show()

    # Close Application
    # ----------------------------------
    def Open_LIN_REG(self):
        df_main = self.df_table()
        self.dialog = LIN_REG(df_main)
        self.dialog.show()

    # Close Application
    # ----------------------------------
    def close(self):
        sys.exit()

# ------------------------------------------------- LINEAR REGRESSION WINDOW ------------------------------------------------- #
class LIN_REG(qw.QWidget):

    # Regression Window 
    # ----------------------------------
    def __init__(self, df_main):
        super().__init__()

        l = qw.QGridLayout(self)

        self.title = 'Linear Regression Sheep Savings'
        self.top = 300
        self.left = 300
        self.width = 500
        self.height = 500
        self.df_main = df_main
        
        self.setWindowTitle(self.title)
        self.setGeometry(self.top,self.left,self.width,self.height)
        self.init_lin_reg(l)

    # Added items to login Screen
    # ----------------------------------
    def init_lin_reg(self, l):
        self.btn_exe = qw.QPushButton('Execute Linear Regression', self)
        l.addWidget(self.btn_exe ,0,1)
        self.btn_exe.clicked.connect(self.linear_regression)

        self.qbox_x = qw.QComboBox(self)
        l.addWidget(self.qbox_x ,0,0)

        self.qbox_y = qw.QComboBox(self)
        l.addWidget(self.qbox_y, 1,0)

        # visualizing GUI
        self.fill_qbox_x()
        self.fill_qbox_y()
        self.show()
        
    # Filling qbox_x
    # ----------------------------------
    def fill_qbox_x(self):
        self.qbox_x.clear()

        columns = list(self.df_main.columns.values)
        
        for i in range(len(columns)):
            self.qbox_x.addItem(str(columns[i]))

    # Filling qbox_y
    # ----------------------------------
    def fill_qbox_y(self):
        self.qbox_y.clear()

        columns = list(self.df_main.columns.values)
        
        for i in range(len(columns)):
            self.qbox_y.addItem(str(columns[i]))
            
    # Added items to login Screen
    # ----------------------------------
    def linear_regression(self):
        df_regression = self.df_main

        x_column = self.qbox_x.currentText()
        y_column = self.qbox_y.currentText()

        df_x = df_regression[str(x_column)]
        print(df_x)

        x = np.array([])
        print(x)
        for i in df_x:
            print(str(df_x))
        print(x)
        
        df_y = df_regression[str(y_column)].values


        # creating training and test data
        x_train, x_test, y_train, y_test = tts(x,y, test_size = 0.2, random_state = 0)


        # fitting simple regression to training set
        r = LinearRegression()
        r.fit(x_train, y_train)


        # Prediting the Test set results
        y_pred = r.predict(x_test)


        #values of intercept and coefficient
        print(r.intercept_)
        print(r.coef_)

        # quality of error and machine
        print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  
        print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  
        print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))


        # Plotting the training results
        plt.scatter(x_train, y_train, color = 'red')
        plt.plot(x_train, r.predict(x_train), color = 'blue')
        plt.title('First linear regression')
        plt.xlabel('x')
        plt.ylabel('y')
        plt.show()


# ------------------------------------------------- START APP ------------------------------------------------- #            
App = qw.QApplication(sys.argv)
W = GUI('willem')
sys.exit(App.exec)
